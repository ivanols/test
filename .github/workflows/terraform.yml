
name: 'Terraform-DEV'

#on:
#  push:
#    branches:
#    - "master"
#  pull_request:
  
on:
  workflow_dispatch:
    inputs:
      execute:
        description: Terraform execute [plan, apply or destroy]
        required: true
        default: "plan"

permissions:
  contents: read
  
env:
  tf_backend_container_name: test-12378
  tf_backend_tfstate_name: tfstate/test.tfstate
  tf_backend_region: eu-west-1  

jobs:

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check
    
  plan:

    # Generates an execution plan for Terraform
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        shell: bash
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} 
    if: github.event.inputs.execute == 'plan'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Terraform Init
      run: terraform init
    - name: Terraform Plan
      #run: terraform plan -input=false
      run: terraform plan
      
  apply:

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        shell: bash
    #if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} 
    if: github.event.inputs.execute == 'apply'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Terraform Init
      run: terraform init  
    - name: Terraform Apply
      #run: terraform apply -auto-approve -input=false
      run: terraform apply -auto-approve

  destroy:

    # Generates an execution plan for Terraform
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        shell: bash
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }} 
    if: github.event.inputs.execute == 'destroy'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Terraform Init
      run: terraform init
    - name: Terraform Destroy
      #run: terraform plan -input=false
      run: terraform destroy
